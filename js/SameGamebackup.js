// Generated by CoffeeScript 1.9.3
(function() {
  window.app = {
    define: {
      x_axis: 5,
      y_axis: 5,
      num: 2,
      first: [this.y_axis],
      delarray: [],
      cparray: [],
      opacity: [],
      round: 0,
      color: ['#000', '#0ff', '#ff0', '#f0f', '#f00', '#0f0', '#bb0', '#f50', '#940', '#069', '#39d']
    },
    initialize: function() {
      this.createBlock();
      this.addColor();
      this.bindBlock();
      return this.opacity();
    },
    createBlock: function() {
      var innum, k, l, ref, ref1, x, y;
      this.define.cparray = [];
      this.define.first = [];
      this.define.delarray = [];
      for (y = k = 0, ref = this.define.y_axis; 0 <= ref ? k < ref : k > ref; y = 0 <= ref ? ++k : --k) {
        this.define.first[y] = new Array(this.define.x_axis);
        $('#stage').append("<div class='line'></div>");
        for (x = l = 0, ref1 = this.define.x_axis; 0 <= ref1 ? l < ref1 : l > ref1; x = 0 <= ref1 ? ++l : --l) {
          innum = _.random(1, this.define.num);
          this.define.first[y][x] = innum;
          $('#stage > .line:last-child').append("<div id=\"" + y + "_" + x + "\" class=\"block\" data-y=\"" + y + "\" data-x=\"" + x + "\" data-num=\"" + innum + "\">" + this.define.first[y][x] + "</div>");
        }
        this.define.cparray = $.extend(true, [], this.define.first);
      }
      return $('.block').css({
        'width': '50px',
        'height': '50px',
        'margin': '1px',
        'float': 'left'
      });
    },
    addColor: function() {
      var k, ref, results, x, y;
      results = [];
      for (y = k = 0, ref = this.define.y_axis; 0 <= ref ? k < ref : k > ref; y = 0 <= ref ? ++k : --k) {
        results.push((function() {
          var l, ref1, results1;
          results1 = [];
          for (x = l = 0, ref1 = this.define.x_axis; 0 <= ref1 ? l < ref1 : l > ref1; x = 0 <= ref1 ? ++l : --l) {
            results1.push($("#" + y + "_" + x).css({
              'background-color': this.define.color[Number($("#" + y + "_" + x).html())]
            }));
          }
          return results1;
        }).call(this));
      }
      return results;
    },
    bindBlock: function() {
      var self;
      self = this;
      return $('.block').bind('click', function() {
        var check, cparray, delarray, evt, x, y;
        delarray = self.define.delarray;
        cparray = self.define.cparray;
        x = parseInt($(this).attr('data-x'));
        y = parseInt($(this).attr('data-y'));
        check = parseInt($(this).text());
        self.search(y, x, check, cparray, self.define.delarray);
        if (delarray.length === 1) {
          cparray[y][x] = check;
          $("#" + y + "_" + x).text("" + check);
        }
        self.del(delarray, cparray);
        self.addColor();
        self.score(self.define.delarray.length);
        self.define.delarray = [];
        self.resetopacity();
        app.define.opacity = [];
        evt = $.Event('mouseover');
        $("#" + y + "_" + x).trigger(evt);
        return self.fincheck(cparray);
      });
    },
    search: function(y, x, check, cparray, pushArray) {
      if (y < 0 || y >= this.define.y_axis || x < 0 || x >= this.define.x_axis) {
        return;
      }
      if (cparray[y][x] !== check) {
        return;
      }
      if (cparray[y][x] === 0) {
        return;
      }
      pushArray.push({
        x: x,
        y: y
      });
      cparray[y][x] = 0;
      this.search(y - 1, x, check, cparray, pushArray);
      this.search(y + 1, x, check, cparray, pushArray);
      this.search(y, x - 1, check, cparray, pushArray);
      this.search(y, x + 1, check, cparray, pushArray);
    },
    del: function(delarray, cparray) {
      var cpx, cpy, fixy, i, j, k, l, len, m, n, ref, ref1, ref2, results, x, xpos, y, ypos;
      if (delarray.length === 0) {
        return;
      }
      for (x = k = 0, ref = this.define.x_axis; 0 <= ref ? k < ref : k > ref; x = 0 <= ref ? ++k : --k) {
        for (y = l = 0, ref1 = this.define.y_axis; 0 <= ref1 ? l < ref1 : l > ref1; y = 0 <= ref1 ? ++l : --l) {
          if (cparray[y][x] === 0) {
            ypos = y - 1;
            while (ypos >= 0) {
              if (cparray[ypos][x] !== 0) {
                cparray[ypos + 1][x] = cparray[ypos][x];
                cparray[ypos][x] = 0;
              }
              ypos--;
            }
          }
        }
      }
      fixy = this.define.y_axis - 1;
      j = 0;
      while (j < 10) {
        for (x = m = 0, ref2 = this.define.x_axis - 1; 0 <= ref2 ? m < ref2 : m > ref2; x = 0 <= ref2 ? ++m : --m) {
          if (cparray[fixy][x] === 0) {
            xpos = x + 1;
            ypos = this.define.y_axis - 1;
            while (ypos >= 0) {
              cparray[ypos][x] = cparray[ypos][xpos];
              cparray[ypos][xpos] = 0;
              ypos--;
            }
          }
        }
        j++;
      }
      results = [];
      for (i = n = 0, len = cparray.length; n < len; i = ++n) {
        cpx = cparray[i];
        results.push((function() {
          var len1, o, results1;
          results1 = [];
          for (j = o = 0, len1 = cpx.length; o < len1; j = ++o) {
            cpy = cpx[j];
            results1.push($("#" + i + "_" + j).text("" + cpy));
          }
          return results1;
        })());
      }
      return results;
    },
    fincheck: function(cparray) {
      var check, k, l, ref, ref1, score, x, y;
      for (x = k = 0, ref = this.define.x_axis; 0 <= ref ? k < ref : k > ref; x = 0 <= ref ? ++k : --k) {
        for (y = l = 0, ref1 = this.define.y_axis; 0 <= ref1 ? l < ref1 : l > ref1; y = 0 <= ref1 ? ++l : --l) {
          check = cparray[y][x];
          if (cparray[y][x] === 0) {
            continue;
          }
          if (x + 1 < this.define.x_axis) {
            if (cparray[y][x + 1] === check) {
              return;
            }
          }
          if (x - 1 >= 0) {
            if (cparray[y][x - 1] === check) {
              return;
            }
          }
          if (y + 1 < this.define.y_axis) {
            if (cparray[y + 1][x] === check) {
              return;
            }
          }
          if (y - 1 >= 0) {
            if (cparray[y - 1][x] === check) {
              return;
            }
          }
        }
      }
      score = Number($('#score').text());
      if (cparray[this.define.y_axis - 1][0] === 0) {
        this.bonus();
        return alert("clear!" + score);
      } else {
        return alert("failure!" + score);
      }
    },
    bonus: function() {
      var score;
      score = Number($('#score').text());
      score = score + (this.define.num / 2 + 1);
      return console.log("bonus=" + score);
    },
    resetopacity: function() {
      var i, j, k, ref, results;
      results = [];
      for (i = k = 0, ref = this.define.x_axis; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
        results.push((function() {
          var l, ref1, results1;
          results1 = [];
          for (j = l = 0, ref1 = this.define.y_axis; 0 <= ref1 ? l < ref1 : l > ref1; j = 0 <= ref1 ? ++l : --l) {
            results1.push($("#" + j + "_" + i).css({
              'opacity': '1'
            }));
          }
          return results1;
        }).call(this));
      }
      return results;
    },
    opacity: function() {
      var self;
      console.log("opacity");
      self = this;
      return $('.block').hover((function() {
        var check, cparray, i, k, len, ref, results, x, y;
        check = Number($(this).html());
        y = Number($(this).attr('data-y'));
        x = Number($(this).attr('data-x'));
        cparray = $.extend(true, [], app.define.cparray);
        app.search(y, x, check, cparray, self.define.opacity);
        if (self.define.opacity === 0) {
          return;
        }
        ref = app.define.opacity;
        results = [];
        for (k = 0, len = ref.length; k < len; k++) {
          i = ref[k];
          results.push($("#" + [i.y] + "_" + [i.x]).css({
            'opacity': '0.2'
          }));
        }
        return results;
      }), function() {
        var i, k, len, ref;
        ref = app.define.opacity;
        for (k = 0, len = ref.length; k < len; k++) {
          i = ref[k];
          $("#" + [i.y] + "_" + [i.x]).css({
            'opacity': '1'
          });
        }
        return app.define.opacity = [];
      });
    },
    score: function(deletelength) {
      var score;
      if (deletelength <= 1) {
        return;
      }
      score = Number($('#score').text());
      score = score + ((deletelength * 10) * (deletelength / 10 + 1));
      score = Math.round(score);
      return $('#score').text("" + score);
    },
    scorereset: function() {
      return $('#score').text("0");
    },
    record: function() {
      var score;
      this.define.round++;
      score = Number($('#score').text());
      if (score === 0) {
        return;
      }
      return $('div.record').append("<p>" + this.define.round + "回目のスコア：<span class=\"record\">" + score + "</span>");
    },
    highscorecheck: function() {
      var highscore, score;
      score = Number($('#score').text());
      highscore = Number($('#highscore').text());
      if (score >= highscore) {
        highscore = score;
      }
      return $('#highscore').text("" + highscore);
    }
  };

  $(function() {
    $('.block').element;
    console.log("mainstart");
    app.initialize();
    return $('.reset').bind('click', function() {
      $('#stage > *').remove();
      app.highscorecheck();
      app.record();
      app.initialize();
      return app.scorereset();
    });
  });

}).call(this);
